(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 8.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[     37388,        975]
NotebookOptionsPosition[     34892,        883]
NotebookOutlinePosition[     35235,        898]
CellTagsIndexPosition[     35192,        895]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Problem 52", "Title",
 CellChangeTimes->{{3.5195194422428985`*^9, 3.5195194441370068`*^9}}],

Cell["\<\
It can be seen that the number, 125874, and its double, 251748, contain \
exactly the same digits, but in a different order.

Find the smallest positive integer, x, such that 2x, 3x, 4x, 5x, and 6x, \
contain the same digits.\
\>", "Text",
 CellChangeTimes->{{3.51952892445925*^9, 3.5195289283074703`*^9}}],

Cell[CellGroupData[{

Cell["From Problem 49", "Section",
 CellChangeTimes->{{3.519519450122349*^9, 3.519519458303817*^9}, {
  3.519519642050327*^9, 3.5195196444094615`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"permutationQ", "[", "num_", "]"}], ":=", 
  RowBox[{
   RowBox[{"MemberQ", "[", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"FromDigits", "[", "i", "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", 
         RowBox[{"Permutations", "[", 
          RowBox[{"IntegerDigits", "[", 
           RowBox[{"num", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}]}], "}"}]}], "]"}], 
     ",", 
     RowBox[{"num", "[", 
      RowBox[{"[", "2", "]"}], "]"}]}], "]"}], " ", "&&", " ", 
   RowBox[{"MemberQ", "[", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"FromDigits", "[", "i", "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", 
         RowBox[{"Permutations", "[", 
          RowBox[{"IntegerDigits", "[", 
           RowBox[{"num", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}]}], "}"}]}], "]"}], 
     ",", 
     RowBox[{"num", "[", 
      RowBox[{"[", "3", "]"}], "]"}]}], "]"}]}]}]], "Input"]
}, Open  ]],

Cell[CellGroupData[{

Cell["New Work", "Section",
 CellChangeTimes->{{3.5195195874042015`*^9, 3.5195195904543753`*^9}, {
  3.519519629444606*^9, 3.5195196339048605`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"sequence", "[", "x_", "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{"x", ",", 
    RowBox[{"2", "x"}], ",", 
    RowBox[{"3", "x"}], ",", 
    RowBox[{"4", "x"}], ",", 
    RowBox[{"5", "x"}], ",", 
    RowBox[{"6", "x"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.5195197166335926`*^9, 3.5195197443271766`*^9}}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{3.5195199911102915`*^9}],

Cell[BoxData[
 RowBox[{"MemberQ", "[", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"FromDigits", "[", "i", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", 
       RowBox[{"Permutations", "[", 
        RowBox[{"IntegerDigits", "[", 
         RowBox[{"num", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}]}], "}"}]}], "]"}], ",", 
   RowBox[{"num", "[", 
    RowBox[{"[", "2", "]"}], "]"}]}], "]"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"FromDigits", "[", "i", "]"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"i", ",", " ", 
     RowBox[{"Permutations", "[", 
      RowBox[{"IntegerDigits", "[", "125874", "]"}], "]"}]}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.5195201460501537`*^9, 3.519520157731822*^9}, {
  3.519527120966096*^9, 3.5195271258653765`*^9}},
 FormatType->"InputForm",
 FontWeight->"Plain"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "125874", ",", "125847", ",", "125784", ",", "125748", ",", "125487", ",", 
   "125478", ",", "128574", ",", "128547", ",", "128754", ",", "128745", ",", 
   "128457", ",", "128475", ",", "127584", ",", "127548", ",", "127854", ",", 
   "127845", ",", "127458", ",", "127485", ",", "124587", ",", "124578", ",", 
   "124857", ",", "124875", ",", "124758", ",", "124785", ",", "152874", ",", 
   "152847", ",", "152784", ",", "152748", ",", "152487", ",", "152478", ",", 
   "158274", ",", "158247", ",", "158724", ",", "158742", ",", "158427", ",", 
   "158472", ",", "157284", ",", "157248", ",", "157824", ",", "157842", ",", 
   "157428", ",", "157482", ",", "154287", ",", "154278", ",", "154827", ",", 
   "154872", ",", "154728", ",", "154782", ",", "182574", ",", "182547", ",", 
   "182754", ",", "182745", ",", "182457", ",", "182475", ",", "185274", ",", 
   "185247", ",", "185724", ",", "185742", ",", "185427", ",", "185472", ",", 
   "187254", ",", "187245", ",", "187524", ",", "187542", ",", "187425", ",", 
   "187452", ",", "184257", ",", "184275", ",", "184527", ",", "184572", ",", 
   "184725", ",", "184752", ",", "172584", ",", "172548", ",", "172854", ",", 
   "172845", ",", "172458", ",", "172485", ",", "175284", ",", "175248", ",", 
   "175824", ",", "175842", ",", "175428", ",", "175482", ",", "178254", ",", 
   "178245", ",", "178524", ",", "178542", ",", "178425", ",", "178452", ",", 
   "174258", ",", "174285", ",", "174528", ",", "174582", ",", "174825", ",", 
   "174852", ",", "142587", ",", "142578", ",", "142857", ",", "142875", ",", 
   "142758", ",", "142785", ",", "145287", ",", "145278", ",", "145827", ",", 
   "145872", ",", "145728", ",", "145782", ",", "148257", ",", "148275", ",", 
   "148527", ",", "148572", ",", "148725", ",", "148752", ",", "147258", ",", 
   "147285", ",", "147528", ",", "147582", ",", "147825", ",", "147852", ",", 
   "215874", ",", "215847", ",", "215784", ",", "215748", ",", "215487", ",", 
   "215478", ",", "218574", ",", "218547", ",", "218754", ",", "218745", ",", 
   "218457", ",", "218475", ",", "217584", ",", "217548", ",", "217854", ",", 
   "217845", ",", "217458", ",", "217485", ",", "214587", ",", "214578", ",", 
   "214857", ",", "214875", ",", "214758", ",", "214785", ",", "251874", ",", 
   "251847", ",", "251784", ",", "251748", ",", "251487", ",", "251478", ",", 
   "258174", ",", "258147", ",", "258714", ",", "258741", ",", "258417", ",", 
   "258471", ",", "257184", ",", "257148", ",", "257814", ",", "257841", ",", 
   "257418", ",", "257481", ",", "254187", ",", "254178", ",", "254817", ",", 
   "254871", ",", "254718", ",", "254781", ",", "281574", ",", "281547", ",", 
   "281754", ",", "281745", ",", "281457", ",", "281475", ",", "285174", ",", 
   "285147", ",", "285714", ",", "285741", ",", "285417", ",", "285471", ",", 
   "287154", ",", "287145", ",", "287514", ",", "287541", ",", "287415", ",", 
   "287451", ",", "284157", ",", "284175", ",", "284517", ",", "284571", ",", 
   "284715", ",", "284751", ",", "271584", ",", "271548", ",", "271854", ",", 
   "271845", ",", "271458", ",", "271485", ",", "275184", ",", "275148", ",", 
   "275814", ",", "275841", ",", "275418", ",", "275481", ",", "278154", ",", 
   "278145", ",", "278514", ",", "278541", ",", "278415", ",", "278451", ",", 
   "274158", ",", "274185", ",", "274518", ",", "274581", ",", "274815", ",", 
   "274851", ",", "241587", ",", "241578", ",", "241857", ",", "241875", ",", 
   "241758", ",", "241785", ",", "245187", ",", "245178", ",", "245817", ",", 
   "245871", ",", "245718", ",", "245781", ",", "248157", ",", "248175", ",", 
   "248517", ",", "248571", ",", "248715", ",", "248751", ",", "247158", ",", 
   "247185", ",", "247518", ",", "247581", ",", "247815", ",", "247851", ",", 
   "512874", ",", "512847", ",", "512784", ",", "512748", ",", "512487", ",", 
   "512478", ",", "518274", ",", "518247", ",", "518724", ",", "518742", ",", 
   "518427", ",", "518472", ",", "517284", ",", "517248", ",", "517824", ",", 
   "517842", ",", "517428", ",", "517482", ",", "514287", ",", "514278", ",", 
   "514827", ",", "514872", ",", "514728", ",", "514782", ",", "521874", ",", 
   "521847", ",", "521784", ",", "521748", ",", "521487", ",", "521478", ",", 
   "528174", ",", "528147", ",", "528714", ",", "528741", ",", "528417", ",", 
   "528471", ",", "527184", ",", "527148", ",", "527814", ",", "527841", ",", 
   "527418", ",", "527481", ",", "524187", ",", "524178", ",", "524817", ",", 
   "524871", ",", "524718", ",", "524781", ",", "581274", ",", "581247", ",", 
   "581724", ",", "581742", ",", "581427", ",", "581472", ",", "582174", ",", 
   "582147", ",", "582714", ",", "582741", ",", "582417", ",", "582471", ",", 
   "587124", ",", "587142", ",", "587214", ",", "587241", ",", "587412", ",", 
   "587421", ",", "584127", ",", "584172", ",", "584217", ",", "584271", ",", 
   "584712", ",", "584721", ",", "571284", ",", "571248", ",", "571824", ",", 
   "571842", ",", "571428", ",", "571482", ",", "572184", ",", "572148", ",", 
   "572814", ",", "572841", ",", "572418", ",", "572481", ",", "578124", ",", 
   "578142", ",", "578214", ",", "578241", ",", "578412", ",", "578421", ",", 
   "574128", ",", "574182", ",", "574218", ",", "574281", ",", "574812", ",", 
   "574821", ",", "541287", ",", "541278", ",", "541827", ",", "541872", ",", 
   "541728", ",", "541782", ",", "542187", ",", "542178", ",", "542817", ",", 
   "542871", ",", "542718", ",", "542781", ",", "548127", ",", "548172", ",", 
   "548217", ",", "548271", ",", "548712", ",", "548721", ",", "547128", ",", 
   "547182", ",", "547218", ",", "547281", ",", "547812", ",", "547821", ",", 
   "812574", ",", "812547", ",", "812754", ",", "812745", ",", "812457", ",", 
   "812475", ",", "815274", ",", "815247", ",", "815724", ",", "815742", ",", 
   "815427", ",", "815472", ",", "817254", ",", "817245", ",", "817524", ",", 
   "817542", ",", "817425", ",", "817452", ",", "814257", ",", "814275", ",", 
   "814527", ",", "814572", ",", "814725", ",", "814752", ",", "821574", ",", 
   "821547", ",", "821754", ",", "821745", ",", "821457", ",", "821475", ",", 
   "825174", ",", "825147", ",", "825714", ",", "825741", ",", "825417", ",", 
   "825471", ",", "827154", ",", "827145", ",", "827514", ",", "827541", ",", 
   "827415", ",", "827451", ",", "824157", ",", "824175", ",", "824517", ",", 
   "824571", ",", "824715", ",", "824751", ",", "851274", ",", "851247", ",", 
   "851724", ",", "851742", ",", "851427", ",", "851472", ",", "852174", ",", 
   "852147", ",", "852714", ",", "852741", ",", "852417", ",", "852471", ",", 
   "857124", ",", "857142", ",", "857214", ",", "857241", ",", "857412", ",", 
   "857421", ",", "854127", ",", "854172", ",", "854217", ",", "854271", ",", 
   "854712", ",", "854721", ",", "871254", ",", "871245", ",", "871524", ",", 
   "871542", ",", "871425", ",", "871452", ",", "872154", ",", "872145", ",", 
   "872514", ",", "872541", ",", "872415", ",", "872451", ",", "875124", ",", 
   "875142", ",", "875214", ",", "875241", ",", "875412", ",", "875421", ",", 
   "874125", ",", "874152", ",", "874215", ",", "874251", ",", "874512", ",", 
   "874521", ",", "841257", ",", "841275", ",", "841527", ",", "841572", ",", 
   "841725", ",", "841752", ",", "842157", ",", "842175", ",", "842517", ",", 
   "842571", ",", "842715", ",", "842751", ",", "845127", ",", "845172", ",", 
   "845217", ",", "845271", ",", "845712", ",", "845721", ",", "847125", ",", 
   "847152", ",", "847215", ",", "847251", ",", "847512", ",", "847521", ",", 
   "712584", ",", "712548", ",", "712854", ",", "712845", ",", "712458", ",", 
   "712485", ",", "715284", ",", "715248", ",", "715824", ",", "715842", ",", 
   "715428", ",", "715482", ",", "718254", ",", "718245", ",", "718524", ",", 
   "718542", ",", "718425", ",", "718452", ",", "714258", ",", "714285", ",", 
   "714528", ",", "714582", ",", "714825", ",", "714852", ",", "721584", ",", 
   "721548", ",", "721854", ",", "721845", ",", "721458", ",", "721485", ",", 
   "725184", ",", "725148", ",", "725814", ",", "725841", ",", "725418", ",", 
   "725481", ",", "728154", ",", "728145", ",", "728514", ",", "728541", ",", 
   "728415", ",", "728451", ",", "724158", ",", "724185", ",", "724518", ",", 
   "724581", ",", "724815", ",", "724851", ",", "751284", ",", "751248", ",", 
   "751824", ",", "751842", ",", "751428", ",", "751482", ",", "752184", ",", 
   "752148", ",", "752814", ",", "752841", ",", "752418", ",", "752481", ",", 
   "758124", ",", "758142", ",", "758214", ",", "758241", ",", "758412", ",", 
   "758421", ",", "754128", ",", "754182", ",", "754218", ",", "754281", ",", 
   "754812", ",", "754821", ",", "781254", ",", "781245", ",", "781524", ",", 
   "781542", ",", "781425", ",", "781452", ",", "782154", ",", "782145", ",", 
   "782514", ",", "782541", ",", "782415", ",", "782451", ",", "785124", ",", 
   "785142", ",", "785214", ",", "785241", ",", "785412", ",", "785421", ",", 
   "784125", ",", "784152", ",", "784215", ",", "784251", ",", "784512", ",", 
   "784521", ",", "741258", ",", "741285", ",", "741528", ",", "741582", ",", 
   "741825", ",", "741852", ",", "742158", ",", "742185", ",", "742518", ",", 
   "742581", ",", "742815", ",", "742851", ",", "745128", ",", "745182", ",", 
   "745218", ",", "745281", ",", "745812", ",", "745821", ",", "748125", ",", 
   "748152", ",", "748215", ",", "748251", ",", "748512", ",", "748521", ",", 
   "412587", ",", "412578", ",", "412857", ",", "412875", ",", "412758", ",", 
   "412785", ",", "415287", ",", "415278", ",", "415827", ",", "415872", ",", 
   "415728", ",", "415782", ",", "418257", ",", "418275", ",", "418527", ",", 
   "418572", ",", "418725", ",", "418752", ",", "417258", ",", "417285", ",", 
   "417528", ",", "417582", ",", "417825", ",", "417852", ",", "421587", ",", 
   "421578", ",", "421857", ",", "421875", ",", "421758", ",", "421785", ",", 
   "425187", ",", "425178", ",", "425817", ",", "425871", ",", "425718", ",", 
   "425781", ",", "428157", ",", "428175", ",", "428517", ",", "428571", ",", 
   "428715", ",", "428751", ",", "427158", ",", "427185", ",", "427518", ",", 
   "427581", ",", "427815", ",", "427851", ",", "451287", ",", "451278", ",", 
   "451827", ",", "451872", ",", "451728", ",", "451782", ",", "452187", ",", 
   "452178", ",", "452817", ",", "452871", ",", "452718", ",", "452781", ",", 
   "458127", ",", "458172", ",", "458217", ",", "458271", ",", "458712", ",", 
   "458721", ",", "457128", ",", "457182", ",", "457218", ",", "457281", ",", 
   "457812", ",", "457821", ",", "481257", ",", "481275", ",", "481527", ",", 
   "481572", ",", "481725", ",", "481752", ",", "482157", ",", "482175", ",", 
   "482517", ",", "482571", ",", "482715", ",", "482751", ",", "485127", ",", 
   "485172", ",", "485217", ",", "485271", ",", "485712", ",", "485721", ",", 
   "487125", ",", "487152", ",", "487215", ",", "487251", ",", "487512", ",", 
   "487521", ",", "471258", ",", "471285", ",", "471528", ",", "471582", ",", 
   "471825", ",", "471852", ",", "472158", ",", "472185", ",", "472518", ",", 
   "472581", ",", "472815", ",", "472851", ",", "475128", ",", "475182", ",", 
   "475218", ",", "475281", ",", "475812", ",", "475821", ",", "478125", ",", 
   "478152", ",", "478215", ",", "478251", ",", "478512", ",", "478521"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.519520136298596*^9, 3.5195201611850195`*^9}}]
}, Closed]],

Cell[BoxData[
 RowBox[{
  RowBox[{"permutationQ", "[", 
   RowBox[{"num_", ",", "check_"}], "]"}], " ", ":=", " ", 
  RowBox[{"MemberQ", "[", 
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"FromDigits", "[", "i", "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", 
        RowBox[{"Permutations", "[", 
         RowBox[{"IntegerDigits", "[", "num", "]"}], "]"}]}], "}"}]}], "]"}], 
    ",", "check"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.5195272717317195`*^9, 3.519527347290041*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"tryme", "=", 
  RowBox[{"sequence", "[", "10", "]"}]}]], "Input",
 CellChangeTimes->{{3.519527356558571*^9, 3.519527364961052*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"10", ",", "20", ",", "30", ",", "40", ",", "50", ",", "60"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.519527367009169*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"permutationQ", "[", 
    RowBox[{"10", ",", "#"}], "]"}], "&"}], "/@", "tryme"}]], "Input",
 CellChangeTimes->{{3.5195273722784705`*^9, 3.5195274169640265`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "True", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
   "False"}], "}"}]], "Output",
 CellChangeTimes->{3.519527380084917*^9, 3.519527417922081*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"permutationQ", "[", 
     RowBox[{"10", ",", "#"}], "]"}], "&"}], ",", "tryme"}], "]"}]], "Input",
 CellChangeTimes->{{3.519527479560607*^9, 3.5195275340357227`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "True", ",", "False", ",", "False", ",", "False", ",", "False", ",", 
   "False"}], "}"}]], "Output",
 CellChangeTimes->{3.5195274940464354`*^9, 3.5195275344177446`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MemberQ", "[", 
  RowBox[{"%", ",", "False"}], "]"}]], "Input",
 CellChangeTimes->{{3.5195275433602557`*^9, 3.519527553692847*^9}}],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.519527554202876*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"sequence", "[", "x_", "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"2", "x"}], ",", 
    RowBox[{"3", "x"}], ",", 
    RowBox[{"4", "x"}], ",", 
    RowBox[{"5", "x"}], ",", 
    RowBox[{"6", "x"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.519527653699567*^9, 3.519527670525529*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"Catch", "[", 
   RowBox[{"Do", "[", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"!", 
        RowBox[{"MemberQ", "[", 
         RowBox[{
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"permutationQ", "[", 
              RowBox[{"i", ",", "#"}], "]"}], "&"}], ",", 
            RowBox[{"sequence", "[", "i", "]"}]}], "]"}], ",", "False"}], 
         "]"}]}], ",", 
       RowBox[{"Throw", "[", "i", "]"}], ",", "Continue"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "1000000"}], "}"}]}], "]"}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.5195275625043507`*^9, 3.519527646684166*^9}, {
  3.5195276777569427`*^9, 3.519527727782804*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"465.975`", ",", "142857"}], "}"}]], "Output",
 CellChangeTimes->{{3.519527710210799*^9, 3.5195277209544134`*^9}, 
   3.519528216566761*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sequence", "[", "142857", "]"}]], "Input",
 CellChangeTimes->{{3.51952822127403*^9, 3.519528228380437*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "142857", ",", "285714", ",", "428571", ",", "571428", ",", "714285", ",", 
   "857142"}], "}"}]], "Output",
 CellChangeTimes->{3.5195282289044666`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Solution", "Section",
 CellChangeTimes->{{3.5195283661833186`*^9, 3.5195283669843645`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"sequence", ",", "permutationQ"}], "}"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{"sequence", "[", "x_", "]"}], ":=", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"2", "x"}], ",", 
        RowBox[{"3", "x"}], ",", 
        RowBox[{"4", "x"}], ",", 
        RowBox[{"5", "x"}], ",", 
        RowBox[{"6", "x"}]}], "}"}]}], ";", 
     RowBox[{
      RowBox[{"permutationQ", "[", 
       RowBox[{"num_", ",", "check_"}], "]"}], " ", ":=", " ", 
      RowBox[{"MemberQ", "[", 
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"FromDigits", "[", "i", "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", 
            RowBox[{"Permutations", "[", 
             RowBox[{"IntegerDigits", "[", "num", "]"}], "]"}]}], "}"}]}], 
         "]"}], ",", "check"}], "]"}]}], ";", 
     RowBox[{"Catch", "[", 
      RowBox[{"Do", "[", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", 
           RowBox[{"MemberQ", "[", 
            RowBox[{
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"permutationQ", "[", 
                 RowBox[{"i", ",", "#"}], "]"}], "&"}], ",", 
               RowBox[{"sequence", "[", "i", "]"}]}], "]"}], ",", "False"}], 
            "]"}]}], ",", 
          RowBox[{"Throw", "[", "i", "]"}], ",", "Continue"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "1", ",", "1000000"}], "}"}]}], "]"}], "]"}]}]}], 
   "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.519528290295978*^9, 3.519528346059168*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"459.95399999999995`", ",", "142857"}], "}"}]], "Output",
 CellChangeTimes->{3.519528843977647*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Optimization", "Section",
 CellChangeTimes->{{3.5195284853121324`*^9, 3.519528487069233*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Join", "[", 
  RowBox[{
   RowBox[{"Range", "[", 
    RowBox[{"1", ",", "166"}], "]"}], ",", 
   RowBox[{"Range", "[", 
    RowBox[{"1000", ",", "1666"}], "]"}], ",", 
   RowBox[{"Range", "[", 
    RowBox[{"10000", ",", "16666"}], "]"}], ",", 
   RowBox[{"Range", "[", 
    RowBox[{"100000", ",", "166666"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.5195285021010923`*^9, 3.5195285783954563`*^9}}],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   PanelBox[GridBox[{
      {
       StyleBox[
        StyleBox[
         DynamicBox[ToBoxes[
           FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
           StandardForm],
          ImageSizeCache->{299., {3., 9.}}],
         StripOnInput->False,
         DynamicUpdating->True], "Panel",
        StripOnInput->False,
        Background->None]},
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          RowBox[{
          "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", 
           ",", "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "13", 
           ",", "14", ",", "15", ",", "16", ",", "17", ",", "18", ",", "19", 
           ",", "20", ",", "21", ",", "22", ",", "23", ",", "24", ",", "25", 
           ",", "26", ",", "27", ",", "28", ",", "29", ",", "30", ",", 
           RowBox[{"\[LeftSkeleton]", "74107", "\[RightSkeleton]"}], ",", 
           "166637", ",", "166638", ",", "166639", ",", "166640", ",", 
           "166641", ",", "166642", ",", "166643", ",", "166644", ",", 
           "166645", ",", "166646", ",", "166647", ",", "166648", ",", 
           "166649", ",", "166650", ",", "166651", ",", "166652", ",", 
           "166653", ",", "166654", ",", "166655", ",", "166656", ",", 
           "166657", ",", "166658", ",", "166659", ",", "166660", ",", 
           "166661", ",", "166662", ",", "166663", ",", "166664", ",", 
           "166665", ",", "166666"}], "}"}],
         Short[#, 5]& ],
        Background->GrayLevel[1],
        BaseStyle->{Deployed -> False},
        Frame->True,
        FrameStyle->GrayLevel[0, 0.2],
        StripOnInput->False]},
      {
       RowBox[{
        ButtonBox[
         StyleBox[
          StyleBox[
           DynamicBox[ToBoxes[
             FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
             StandardForm],
            ImageSizeCache->{54., {1., 9.}}],
           StripOnInput->False,
           DynamicUpdating->True], "Panel",
          StripOnInput->False,
          Background->None],
         Appearance->Automatic,
         ButtonFunction:>OutputSizeLimit`ButtonFunction[
          Identity, 179, 23065103231881074522, 5/2],
         Enabled->True,
         Evaluator->Automatic,
         Method->"Queued"], "\[ThinSpace]", 
        ButtonBox[
         StyleBox[
          StyleBox[
           DynamicBox[ToBoxes[
             FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
             StandardForm],
            ImageSizeCache->{60., {1., 9.}}],
           StripOnInput->False,
           DynamicUpdating->True], "Panel",
          StripOnInput->False,
          Background->None],
         Appearance->Automatic,
         ButtonFunction:>OutputSizeLimit`ButtonFunction[
          Identity, 179, 23065103231881074522, 5 2],
         Enabled->True,
         Evaluator->Automatic,
         Method->"Queued"], "\[ThinSpace]", 
        ButtonBox[
         StyleBox[
          StyleBox[
           DynamicBox[ToBoxes[
             FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
             StandardForm],
            ImageSizeCache->{92., {3., 9.}}],
           StripOnInput->False,
           DynamicUpdating->True], "Panel",
          StripOnInput->False,
          Background->None],
         Appearance->Automatic,
         ButtonFunction:>OutputSizeLimit`ButtonFunction[
          Identity, 179, 23065103231881074522, Infinity],
         Enabled->True,
         Evaluator->Automatic,
         Method->"Queued"], "\[ThinSpace]", 
        ButtonBox[
         StyleBox[
          StyleBox[
           DynamicBox[ToBoxes[
             FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
             StandardForm],
            ImageSizeCache->{78., {1., 9.}}],
           StripOnInput->False,
           DynamicUpdating->True], "Panel",
          StripOnInput->False,
          Background->None],
         Appearance->Automatic,
         ButtonFunction:>FrontEndExecute[{
            FrontEnd`SetOptions[
            FrontEnd`$FrontEnd, 
             FrontEnd`PreferencesSettings -> {"Page" -> "Evaluation"}], 
            FrontEnd`FrontEndToken["PreferencesDialog"]}],
         Evaluator->None,
         Method->"Preemptive"]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[1.2]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    DefaultBaseStyle->{},
    FrameMargins->5],
   Deploy,
   DefaultBaseStyle->{Deployed -> True}],
  Out[179]]], "Output",
 CellChangeTimes->{3.519528847632856*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"sequence", ",", "permutationQ"}], "}"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{"sequence", "[", "x_", "]"}], ":=", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"2", "x"}], ",", 
        RowBox[{"3", "x"}], ",", 
        RowBox[{"4", "x"}], ",", 
        RowBox[{"5", "x"}], ",", 
        RowBox[{"6", "x"}]}], "}"}]}], ";", 
     RowBox[{
      RowBox[{"permutationQ", "[", 
       RowBox[{"num_", ",", "check_"}], "]"}], " ", ":=", " ", 
      RowBox[{"MemberQ", "[", 
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"FromDigits", "[", "i", "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", 
            RowBox[{"Permutations", "[", 
             RowBox[{"IntegerDigits", "[", "num", "]"}], "]"}]}], "}"}]}], 
         "]"}], ",", "check"}], "]"}]}], ";", 
     RowBox[{"Catch", "[", 
      RowBox[{"Do", "[", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", 
           RowBox[{"MemberQ", "[", 
            RowBox[{
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"permutationQ", "[", 
                 RowBox[{"i", ",", "#"}], "]"}], "&"}], ",", 
               RowBox[{"sequence", "[", "i", "]"}]}], "]"}], ",", "False"}], 
            "]"}]}], ",", 
          RowBox[{"Throw", "[", "i", "]"}], ",", "Continue"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"Range", "[", 
             RowBox[{"1", ",", "166"}], "]"}], ",", 
            RowBox[{"Range", "[", 
             RowBox[{"1000", ",", "1666"}], "]"}], ",", 
            RowBox[{"Range", "[", 
             RowBox[{"10000", ",", "16666"}], "]"}], ",", 
            RowBox[{"Range", "[", 
             RowBox[{"100000", ",", "166666"}], "]"}]}], "]"}]}], "}"}]}], 
       "]"}], "]"}]}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.51952849418664*^9, 3.519528498761902*^9}, {
  3.5195286070510955`*^9, 3.519528608949204*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"352.1409999999999`", ",", "142857"}], "}"}]], "Output",
 CellChangeTimes->{3.5195292429674673`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sort", "[", 
  RowBox[{"Map", "[", 
   RowBox[{"IntegerDigits", ",", 
    RowBox[{"sequence", "[", "10", "]"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.51952875853876*^9, 3.519528798565049*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "0"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.519529243039472*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Sort", "[", 
     RowBox[{"IntegerDigits", "[", "#", "]"}], "]"}], "&"}], ",", 
   RowBox[{"sequence", "[", "10", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.519529311350379*^9, 3.5195293354637585`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "6"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.519529324818149*^9, 3.519529335908784*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"sequenceQ", "[", "num_", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "seq", "}"}], ",", 
    RowBox[{
     RowBox[{"seq", "=", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Sort", "[", 
          RowBox[{"IntegerDigits", "[", "#", "]"}], "]"}], "&"}], ",", 
        RowBox[{"{", 
         RowBox[{"num", ",", 
          RowBox[{"2", "num"}], ",", 
          RowBox[{"3", "num"}], ",", 
          RowBox[{"4", "num"}], ",", 
          RowBox[{"5", "num"}], ",", 
          RowBox[{"6", "num"}]}], "}"}]}], "]"}]}], ";", " ", 
     RowBox[{
      RowBox[{"seq", "[", 
       RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", 
      RowBox[{"seq", "[", 
       RowBox[{"[", "2", "]"}], "]"}], "\[Equal]", 
      RowBox[{"seq", "[", 
       RowBox[{"[", "3", "]"}], "]"}], "\[Equal]", 
      RowBox[{"seq", "[", 
       RowBox[{"[", "4", "]"}], "]"}], "\[Equal]", 
      RowBox[{"seq", "[", 
       RowBox[{"[", "5", "]"}], "]"}], "\[Equal]", 
      RowBox[{"seq", "[", 
       RowBox[{"[", "6", "]"}], "]"}]}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.519529505501484*^9, 3.5195295648728795`*^9}, {
   3.519529622024149*^9, 3.5195297708736625`*^9}, 3.519529832184169*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sequenceQ", "[", "142857", "]"}]], "Input",
 CellChangeTimes->{{3.519529570732215*^9, 3.519529607292306*^9}, {
  3.519529775673937*^9, 3.5195297890167*^9}, {3.5195298417067137`*^9, 
  3.519529845192913*^9}}],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{{3.5195296090074043`*^9, 3.519529616372825*^9}, {
  3.5195297783070874`*^9, 3.5195297895097284`*^9}, {3.5195298385455327`*^9, 
  3.5195298457589455`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Timing", "[", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "sequenceQ", "}"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{"sequenceQ", "[", "num_", "]"}], ":=", 
      RowBox[{"Block", "[", 
       RowBox[{
        RowBox[{"{", "seq", "}"}], ",", 
        RowBox[{
         RowBox[{"seq", "=", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Sort", "[", 
              RowBox[{"IntegerDigits", "[", "#", "]"}], "]"}], "&"}], ",", 
            RowBox[{"{", 
             RowBox[{"num", ",", 
              RowBox[{"2", "num"}], ",", 
              RowBox[{"3", "num"}], ",", 
              RowBox[{"4", "num"}], ",", 
              RowBox[{"5", "num"}], ",", 
              RowBox[{"6", "num"}]}], "}"}]}], "]"}]}], ";", " ", 
         RowBox[{
          RowBox[{"seq", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "\[Equal]", 
          RowBox[{"seq", "[", 
           RowBox[{"[", "2", "]"}], "]"}], "\[Equal]", 
          RowBox[{"seq", "[", 
           RowBox[{"[", "3", "]"}], "]"}], "\[Equal]", 
          RowBox[{"seq", "[", 
           RowBox[{"[", "4", "]"}], "]"}], "\[Equal]", 
          RowBox[{"seq", "[", 
           RowBox[{"[", "5", "]"}], "]"}], "\[Equal]", 
          RowBox[{"seq", "[", 
           RowBox[{"[", "6", "]"}], "]"}]}]}]}], "]"}]}], ";", 
     RowBox[{"Catch", "[", 
      RowBox[{"Do", "[", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"sequenceQ", "[", "i", "]"}], ",", 
          RowBox[{"Throw", "[", "i", "]"}], ",", "Continue"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"Range", "[", 
             RowBox[{"1", ",", "166"}], "]"}], ",", 
            RowBox[{"Range", "[", 
             RowBox[{"1000", ",", "1666"}], "]"}], ",", 
            RowBox[{"Range", "[", 
             RowBox[{"10000", ",", "16666"}], "]"}], ",", 
            RowBox[{"Range", "[", 
             RowBox[{"100000", ",", "166666"}], "]"}]}], "]"}]}], "}"}]}], 
       "]"}], "]"}]}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.5195294693074136`*^9, 3.5195295032073526`*^9}, {
  3.5195298533513794`*^9, 3.5195299415974274`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2.714000000000052`", ",", "142857"}], "}"}]], "Output",
 CellChangeTimes->{3.519529946004679*^9}]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.5195302594676085`*^9, 3.5195302625017815`*^9}}]
}, Open  ]]
}, Open  ]]
},
WindowSize->{707, 647},
WindowMargins->{{Automatic, 0}, {0, Automatic}},
FrontEndVersion->"8.0 for Microsoft Windows (32-bit) (February 23, 2011)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[579, 22, 97, 1, 83, "Title"],
Cell[679, 25, 316, 7, 65, "Text"],
Cell[CellGroupData[{
Cell[1020, 36, 151, 2, 71, "Section"],
Cell[1174, 40, 1032, 31, 112, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2243, 76, 148, 2, 71, "Section"],
Cell[2394, 80, 343, 10, 31, "Input"],
Cell[2740, 92, 70, 1, 31, "Input"],
Cell[2813, 95, 448, 13, 52, "Input"],
Cell[CellGroupData[{
Cell[3286, 112, 439, 12, 30, "Input"],
Cell[3728, 126, 11499, 148, 1513, "Output"]
}, Closed]],
Cell[15242, 277, 516, 14, 46, "Input"],
Cell[CellGroupData[{
Cell[15783, 295, 155, 3, 31, "Input"],
Cell[15941, 300, 164, 4, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[16142, 309, 208, 5, 31, "Input"],
Cell[16353, 316, 207, 5, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[16597, 326, 238, 6, 31, "Input"],
Cell[16838, 334, 211, 5, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[17086, 344, 155, 3, 31, "Input"],
Cell[17244, 349, 73, 1, 30, "Output"]
}, Open  ]],
Cell[17332, 353, 329, 10, 31, "Input"],
Cell[CellGroupData[{
Cell[17686, 367, 785, 22, 72, "Input"],
Cell[18474, 391, 179, 4, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[18690, 400, 131, 2, 31, "Input"],
Cell[18824, 404, 194, 5, 30, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[19067, 415, 97, 1, 71, "Section"],
Cell[CellGroupData[{
Cell[19189, 420, 1693, 48, 112, "Input"],
Cell[20885, 470, 138, 3, 30, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[21072, 479, 99, 1, 71, "Section"],
Cell[CellGroupData[{
Cell[21196, 484, 428, 11, 31, "Input"],
Cell[21627, 497, 5111, 134, 194, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[26775, 636, 2152, 59, 152, "Input"],
Cell[28930, 697, 139, 3, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[29106, 705, 226, 5, 31, "Input"],
Cell[29335, 712, 449, 15, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[29821, 732, 279, 7, 31, "Input"],
Cell[30103, 741, 473, 15, 30, "Output"]
}, Open  ]],
Cell[30591, 759, 1258, 34, 92, "Input"],
Cell[CellGroupData[{
Cell[31874, 797, 231, 4, 31, "Input"],
Cell[32108, 803, 205, 3, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[32350, 811, 2263, 59, 192, "Input"],
Cell[34616, 872, 137, 3, 30, "Output"]
}, Open  ]],
Cell[34768, 878, 96, 1, 31, "Input"]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
